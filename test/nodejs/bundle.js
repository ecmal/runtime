//#!/usr/bin/env node
(function(main,scripts){
    var evaluate;
    if(typeof window!='undefined'){
        evaluate = function evaluate(name,content){
            var aMain = document.querySelector('script[main]');
            aMain.removeAttribute('main');
            aMain = aMain.src.split('/');
            aMain.pop();
            aMain =  aMain.join('/');
            var aHead = document.querySelector('head');
            var aScript = document.createElement('script');
            aScript.type = 'text/javascript';
            aScript.id = name;
            aScript.setAttribute('main',true);

            aScript.text = content+'\n//# sourceURL='+aMain+'/'+name+'.js'
            aHead.appendChild(aScript);
            aScript.setAttribute('src',aMain+'/'+name+'.js');
        }
    }else{
        evaluate = function evaluate(name,content){
            var context = {
                Buffer      : Buffer,
                require     : require,
                process     : process,
                console     : console,
                global      : global,
                __filename  : __filename,
                __dirname   : __dirname
            };
            require('vm').runInNewContext(content,context,{
                filename : __dirname+'/'+name+'.js'
            });
        }
    }
    var runtimeName = 'runtime/package';
    var runtimeScript = scripts[runtimeName];
    delete scripts[runtimeName];
    evaluate(runtimeName,runtimeScript);
    System.bundle(scripts);
    System.import(main).catch(function(e){
        console.info(e.stack||e);
    });
})('bundle/main',{
  "bundle/main": "System.register([\"./one\", \"./two\"], function(exports_1) {\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var one_1, two_1;\n    var Base, Main;\n    return {\n        setters:[\n            function (one_1_1) {\n                one_1 = one_1_1;\n            },\n            function (two_1_1) {\n                two_1 = two_1_1;\n            }],\n        execute: function() {\n            Base = (function (_super) {\n                __extends(Base, _super);\n                function Base(config) {\n                    _super.call(this);\n                    console.info(\"Base\", this.constructor.name, config);\n                }\n                return Base;\n            })(Object);\n            exports_1(\"Base\", Base);\n            Main = (function (_super) {\n                __extends(Main, _super);\n                function Main(config) {\n                    _super.call(this, config);\n                    this.one = new one_1.One();\n                    this.two = new two_1.Two();\n                }\n                Object.defineProperty(Main, \"greatGetter\", {\n                    get: function () {\n                        return this.great;\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                ;\n                Object.defineProperty(Main, \"greatSetter\", {\n                    set: function (v) {\n                        this.great = v;\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                ;\n                Main.from = function (target) {\n                    console.info(this.great, target);\n                };\n                Main.great = 'Main.from';\n                return Main;\n            })(Base);\n            exports_1(\"Main\", Main);\n        }\n    }\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICJtYWluLmpzIiwKICAic291cmNlUm9vdCI6ICIvVXNlcnMvU2VyZ2V5L1dvcmsvQkIvd2NiLXByb2plY3QvcnVudGltZS90ZXN0L2J1bmRsZS9zcmMiLAogICJzb3VyY2VzIjogWwogICAgIm1haW4udHMiCiAgXSwKICAibmFtZXMiOiBbCiAgICAiQmFzZSIsCiAgICAiQmFzZS5jb25zdHJ1Y3RvciIsCiAgICAiTWFpbiIsCiAgICAiTWFpbi5jb25zdHJ1Y3RvciIsCiAgICAiTWFpbi5ncmVhdEdldHRlciIsCiAgICAiTWFpbi5ncmVhdFNldHRlciIsCiAgICAiTWFpbi5mcm9tIgogIF0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7WUFFQTtnQkFBMEJBLHdCQUFNQTtnQkFDNUJBLGNBQVlBLE1BQU1BO29CQUNkQyxpQkFBT0EsQ0FBQ0E7b0JBQ1JBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEVBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLElBQUlBLEVBQUNBLE1BQU1BLENBQUNBLENBQUNBO2dCQUN0REEsQ0FBQ0E7Z0JBQ0xELFdBQUNBO1lBQURBLENBQUNBLEFBTEQsRUFBMEIsTUFBTSxFQUsvQjtZQUxELHVCQUtDLENBQUE7WUFDRDtnQkFBMEJFLHdCQUFJQTtnQkFlMUJBLGNBQVlBLE1BQU1BO29CQUNkQyxrQkFBTUEsTUFBTUEsQ0FBQ0EsQ0FBQUE7b0JBSlZBLFFBQUdBLEdBQU9BLElBQUlBLFNBQUdBLEVBQUVBLENBQUNBO29CQUNwQkEsUUFBR0EsR0FBT0EsSUFBSUEsU0FBR0EsRUFBRUEsQ0FBQ0E7Z0JBSTNCQSxDQUFDQTtnQkFmREQsc0JBQVdBLG1CQUFXQTt5QkFBdEJBO3dCQUNJRSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFBQTtvQkFDckJBLENBQUNBOzs7bUJBQUFGOztnQkFDREEsc0JBQVdBLG1CQUFXQTt5QkFBdEJBLFVBQXVCQSxDQUFRQTt3QkFDM0JHLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBO29CQUNuQkEsQ0FBQ0E7OzttQkFBQUg7O2dCQUNNQSxTQUFJQSxHQUFYQSxVQUFZQSxNQUFVQTtvQkFDbEJJLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUNBLE1BQU1BLENBQUNBLENBQUNBO2dCQUNwQ0EsQ0FBQ0E7Z0JBVE1KLFVBQUtBLEdBQVVBLFdBQVdBLENBQUNBO2dCQWlCdENBLFdBQUNBO1lBQURBLENBQUNBLEFBbEJELEVBQTBCLElBQUksRUFrQjdCO1lBbEJELHVCQWtCQyxDQUFBIiwKICAic291cmNlc0NvbnRlbnQiOiBbCiAgICAiaW1wb3J0IHtPbmV9IGZyb20gXCIuL29uZVwiO1xuaW1wb3J0IHtUd299IGZyb20gXCIuL3R3b1wiO1xuZXhwb3J0IGNsYXNzIEJhc2UgZXh0ZW5kcyBPYmplY3Qge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGNvbnNvbGUuaW5mbyhcIkJhc2VcIix0aGlzLmNvbnN0cnVjdG9yLm5hbWUsY29uZmlnKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTWFpbiBleHRlbmRzIEJhc2Uge1xuICAgIHN0YXRpYyBncmVhdDpTdHJpbmcgPSAnTWFpbi5mcm9tJztcbiAgICBzdGF0aWMgZ2V0IGdyZWF0R2V0dGVyKCk6U3RyaW5ne1xuICAgICAgICByZXR1cm4gdGhpcy5ncmVhdFxuICAgIH07XG4gICAgc3RhdGljIHNldCBncmVhdFNldHRlcih2OlN0cmluZyl7XG4gICAgICAgIHRoaXMuZ3JlYXQgPSB2O1xuICAgIH07XG4gICAgc3RhdGljIGZyb20odGFyZ2V0OmFueSk6dm9pZHtcbiAgICAgICAgY29uc29sZS5pbmZvKHRoaXMuZ3JlYXQsdGFyZ2V0KTtcbiAgICB9XG4gICAgcHVibGljIG90aGVyOigpPT5hbnk7XG4gICAgcHVibGljIG9uZTpPbmUgPSBuZXcgT25lKCk7XG4gICAgcHVibGljIHR3bzpUd28gPSBuZXcgVHdvKCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpe1xuICAgICAgICBzdXBlcihjb25maWcpXG4gICAgfVxufVxuIgogIF0KfQ==",
  "bundle/one": "System.register(['./main'], function(exports_1) {\n    var main_1;\n    var One;\n    return {\n        setters:[\n            function (main_1_1) {\n                main_1 = main_1_1;\n            }],\n        execute: function() {\n            One = (function () {\n                function One() {\n                    this.value = 56;\n                    main_1.Main.from('One');\n                }\n                Object.defineProperty(One.prototype, \"length\", {\n                    get: function () {\n                        return this.value + 1;\n                    },\n                    set: function (v) {\n                        this.value = v - 1;\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                return One;\n            })();\n            exports_1(\"One\", One);\n        }\n    }\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICJvbmUuanMiLAogICJzb3VyY2VSb290IjogIi9Vc2Vycy9TZXJnZXkvV29yay9CQi93Y2ItcHJvamVjdC9ydW50aW1lL3Rlc3QvYnVuZGxlL3NyYyIsCiAgInNvdXJjZXMiOiBbCiAgICAib25lLnRzIgogIF0sCiAgIm5hbWVzIjogWwogICAgIk9uZSIsCiAgICAiT25lLmNvbnN0cnVjdG9yIiwKICAgICJPbmUubGVuZ3RoIgogIF0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7O1lBRUE7Z0JBQ0lBO29CQUdRQyxVQUFLQSxHQUFVQSxFQUFFQSxDQUFDQTtvQkFGdEJBLFdBQUlBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO2dCQUNyQkEsQ0FBQ0E7Z0JBRURELHNCQUFXQSx1QkFBTUE7eUJBQWpCQTt3QkFDSUUsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3hCQSxDQUFDQTt5QkFDREYsVUFBa0JBLENBQVFBO3dCQUN0QkUsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3JCQSxDQUFDQTs7O21CQUhBRjtnQkFJTEEsVUFBQ0E7WUFBREEsQ0FBQ0EsQUFYRCxJQVdDO1lBWEQscUJBV0MsQ0FBQSIsCiAgInNvdXJjZXNDb250ZW50IjogWwogICAgImltcG9ydCB7TWFpbn0gZnJvbSAnLi9tYWluJztcblxuZXhwb3J0IGNsYXNzIE9uZSB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgTWFpbi5mcm9tKCdPbmUnKTtcbiAgICB9XG4gICAgcHJpdmF0ZSB2YWx1ZTpudW1iZXIgPSA1NjtcbiAgICBwdWJsaWMgZ2V0IGxlbmd0aCgpOm51bWJlcntcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUrMTtcbiAgICB9XG4gICAgcHVibGljIHNldCBsZW5ndGgodjpudW1iZXIpe1xuICAgICAgICB0aGlzLnZhbHVlID0gdi0xO1xuICAgIH1cbn1cbiIKICBdCn0=",
  "bundle/two": "System.register(['./main'], function(exports_1) {\n    var main_1;\n    var Two;\n    return {\n        setters:[\n            function (main_1_1) {\n                main_1 = main_1_1;\n            }],\n        execute: function() {\n            Two = (function () {\n                function Two(param) {\n                    main_1.Main.from('Two');\n                }\n                Two.prototype.calc = function (param) {\n                    return main_1.Main.from.bind(this);\n                };\n                return Two;\n            })();\n            exports_1(\"Two\", Two);\n        }\n    }\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICJ0d28uanMiLAogICJzb3VyY2VSb290IjogIi9Vc2Vycy9TZXJnZXkvV29yay9CQi93Y2ItcHJvamVjdC9ydW50aW1lL3Rlc3QvYnVuZGxlL3NyYyIsCiAgInNvdXJjZXMiOiBbCiAgICAidHdvLnRzIgogIF0sCiAgIm5hbWVzIjogWwogICAgIlR3byIsCiAgICAiVHdvLmNvbnN0cnVjdG9yIiwKICAgICJUd28uY2FsYyIKICBdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7OztZQUVBO2dCQUNJQSxhQUFZQSxLQUFhQTtvQkFDckJDLFdBQUlBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO2dCQUNyQkEsQ0FBQ0E7Z0JBQ01ELGtCQUFJQSxHQUFYQSxVQUFZQSxLQUFZQTtvQkFDcEJFLE1BQU1BLENBQUNBLFdBQUlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUNoQ0EsQ0FBQ0E7Z0JBQ0xGLFVBQUNBO1lBQURBLENBQUNBLEFBUEQsSUFPQztZQVBELHFCQU9DLENBQUEiLAogICJzb3VyY2VzQ29udGVudCI6IFsKICAgICJpbXBvcnQge01haW59IGZyb20gJy4vbWFpbic7XG5cbmV4cG9ydCBjbGFzcyBUd28ge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtPzpTdHJpbmcpe1xuICAgICAgICBNYWluLmZyb20oJ1R3bycpO1xuICAgIH1cbiAgICBwdWJsaWMgY2FsYyhwYXJhbTpTdHJpbmcpOkZ1bmN0aW9uIHtcbiAgICAgICAgcmV0dXJuIE1haW4uZnJvbS5iaW5kKHRoaXMpO1xuICAgIH1cbn0iCiAgXQp9",
  "runtime/package": "var Runtime;\n(function (Runtime) {\n    var Path = (function () {\n        function Path() {\n        }\n        Path.filename = function (path) {\n            return path.split(Path.SEP).pop();\n        };\n        Path.dirname = function (path) {\n            path = path.split('/');\n            path.pop();\n            path = path.join('/');\n            return path;\n        };\n        Path.normalize = function (path) {\n            if (!path || path === '/') {\n                return '/';\n            }\n            var prepend = (path[0] == '/' || path[0] == '.');\n            var target = [], src, scheme, parts, token;\n            if (path.indexOf('://') > 0) {\n                parts = path.split('://');\n                scheme = parts[0];\n                src = parts[1].split('/');\n            }\n            else {\n                src = path.split('/');\n            }\n            for (var i = 0; i < src.length; ++i) {\n                token = src[i];\n                if (token === '..') {\n                    target.pop();\n                }\n                else if (token !== '' && token !== '.') {\n                    target.push(token);\n                }\n            }\n            return ((scheme ? scheme + '://' : '') +\n                (prepend ? '/' : '') +\n                target.join('/').replace(/[\\/]{2,}/g, '/'));\n        };\n        Path.resolve = function () {\n            var paths = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                paths[_i - 0] = arguments[_i];\n            }\n            var current = paths.shift();\n            for (var path = void 0, p = 0; p < paths.length; p++) {\n                path = paths[p];\n                if (path[0] == '/') {\n                    current = path;\n                }\n                else {\n                    current = Path.normalize(current + '/' + path);\n                }\n            }\n            return current;\n        };\n        Path.moduleUrl = function (base, id) {\n            return this.resolve(base, id + '.js');\n        };\n        Path.moduleId = function (base, url) {\n            return url.replace(base + '/', '')\n                .replace(/^(.*)\\.js$/g, '$1');\n        };\n        Path.SEP = '/';\n        return Path;\n    })();\n    Runtime.Path = Path;\n})(Runtime || (Runtime = {}));\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Reflect;\n(function (Reflect) {\n    Reflect.METADATA = Symbol('metadata');\n    Reflect.MODULES = Object.create(null);\n    (function (Scope) {\n        Scope[Scope[\"STATIC\"] = 0] = \"STATIC\";\n        Scope[Scope[\"INSTANCE\"] = 1] = \"INSTANCE\";\n    })(Reflect.Scope || (Reflect.Scope = {}));\n    var Scope = Reflect.Scope;\n    (function (ModuleState) {\n        ModuleState[ModuleState[\"CREATED\"] = 0] = \"CREATED\";\n        ModuleState[ModuleState[\"LOADING\"] = 1] = \"LOADING\";\n        ModuleState[ModuleState[\"EVALUATING\"] = 2] = \"EVALUATING\";\n        ModuleState[ModuleState[\"DEFINING\"] = 3] = \"DEFINING\";\n        ModuleState[ModuleState[\"DONE\"] = 4] = \"DONE\";\n        ModuleState[ModuleState[\"FAILED\"] = 5] = \"FAILED\";\n    })(Reflect.ModuleState || (Reflect.ModuleState = {}));\n    var ModuleState = Reflect.ModuleState;\n    var Definition = (function () {\n        function Definition(name) {\n            this.name = name;\n            this.metadata = Object.create(null);\n        }\n        Definition.for = function (target, key, index) {\n            var scope, closure;\n            switch (typeof target) {\n                case \"function\":\n                    closure = target;\n                    scope = Scope.STATIC;\n                    break;\n                case \"object\":\n                    closure = target.constructor;\n                    scope = Scope.INSTANCE;\n                    break;\n            }\n            var cls = closure[Reflect.METADATA];\n            if (cls && key) {\n                var member = cls.get(scope, key);\n                if (member && typeof index == \"number\" && (member instanceof Method)) {\n                    return member.params[index];\n                }\n                else {\n                    return member;\n                }\n            }\n            else {\n                return cls;\n            }\n        };\n        Definition.prototype.getMetadata = function (key) {\n            return this.metadata[Symbol.for(key)];\n        };\n        Definition.prototype.hasMetadata = function (key) {\n            return !!this.getMetadata(key);\n        };\n        Definition.prototype.getMetadataKeys = function () {\n            return Object.getOwnPropertySymbols(this.metadata).map(function (k) { return Symbol.keyFor(k); });\n        };\n        Definition.prototype.setMetadata = function (key, value) {\n            this.metadata[Symbol.for(key)] = value;\n        };\n        Definition.prototype.deleteMetadata = function (key) {\n            delete this.metadata[Symbol.for(key)];\n        };\n        Definition.prototype.toJSON = function () {\n            var any = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                any[_i - 0] = arguments[_i];\n            }\n            return {\n                name: this.name,\n                parent: this.constructor.name\n            };\n        };\n        return Definition;\n    })();\n    Reflect.Definition = Definition;\n    var Class = (function (_super) {\n        __extends(Class, _super);\n        function Class(module, constructor) {\n            _super.call(this, constructor.name);\n            this.owner = module;\n            this.static = {};\n            this.instance = {};\n            this.constructor = constructor;\n            this.owner.add(this);\n        }\n        Class.prototype.get = function (scope, name) {\n            switch (scope) {\n                case Scope.STATIC:\n                    if (this.static[name]) {\n                        return this.static[name];\n                    }\n                    break;\n                case Scope.INSTANCE:\n                    if (this.instance[name]) {\n                        return this.instance[name];\n                    }\n                    break;\n            }\n        };\n        Class.prototype.add = function (member) {\n            switch (member.scope) {\n                case Scope.STATIC:\n                    this.static[member.name] = member;\n                    break;\n                case Scope.INSTANCE:\n                    this.instance[member.name] = member;\n                    break;\n            }\n        };\n        Class.prototype.toJSON = function () {\n            var _this = this;\n            var any = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                any[_i - 0] = arguments[_i];\n            }\n            return {\n                name: this.name,\n                parent: this.parent ? this.parent.name : undefined,\n                children: (function () {\n                    return _this.children\n                        ? _this.children.map(function (c) { return c.name; })\n                        : undefined;\n                })(),\n                params: (function () {\n                    if (_this.params && _this.params.length) {\n                        var map = Object.create(null), count = 0;\n                        Object.keys(_this.params).forEach(function (m) {\n                            map[m] = _this.params[m].toJSON();\n                            count++;\n                        });\n                        return count > 0 ? map : undefined;\n                    }\n                })(),\n                members: (function () {\n                    var map = Object.create(null), count = 0;\n                    Object.keys(_this.static).forEach(function (m) {\n                        map[(\".\" + m)] = _this.static[m].toJSON();\n                        count++;\n                    });\n                    Object.keys(_this.instance).forEach(function (m) {\n                        map[(\"#\" + m)] = _this.instance[m].toJSON();\n                        count++;\n                    });\n                    return count > 0 ? map : undefined;\n                })()\n            };\n        };\n        return Class;\n    })(Definition);\n    Reflect.Class = Class;\n    var Member = (function (_super) {\n        __extends(Member, _super);\n        function Member(name, owner, scope) {\n            _super.call(this, name);\n            this.owner = owner;\n            this.scope = scope;\n            this.name = name;\n        }\n        Member.prototype.toJSON = function () {\n            return {\n                name: this.name,\n                kind: this.constructor.name,\n                owner: this.owner.name,\n                scope: this.scope,\n                type: this.type ? this.type.name : undefined\n            };\n        };\n        return Member;\n    })(Definition);\n    Reflect.Member = Member;\n    var Param = (function (_super) {\n        __extends(Param, _super);\n        function Param(name, owner, type) {\n            _super.call(this, name);\n            this.owner = owner;\n            this.type = type;\n        }\n        Param.prototype.toJSON = function () {\n            var any = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                any[_i - 0] = arguments[_i];\n            }\n            return {\n                name: this.name,\n                owner: this.owner.name,\n                type: this.type ? this.type.name : undefined\n            };\n        };\n        return Param;\n    })(Definition);\n    Reflect.Param = Param;\n    var Method = (function (_super) {\n        __extends(Method, _super);\n        function Method() {\n            _super.apply(this, arguments);\n        }\n        Method.prototype.toJSON = function () {\n            var _this = this;\n            var any = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                any[_i - 0] = arguments[_i];\n            }\n            return {\n                name: this.name,\n                kind: this.constructor.name,\n                owner: this.owner.name,\n                scope: this.scope,\n                type: this.type ? this.type.name : undefined,\n                returnType: this.returnType ? this.returnType.name : undefined,\n                params: (function () {\n                    if (_this.params && _this.params.length) {\n                        var map = Object.create(null), count = 0;\n                        Object.keys(_this.params).forEach(function (m) {\n                            map[m] = _this.params[m].toJSON();\n                            count++;\n                        });\n                        return count > 0 ? map : undefined;\n                    }\n                })()\n            };\n        };\n        return Method;\n    })(Member);\n    Reflect.Method = Method;\n    var Field = (function (_super) {\n        __extends(Field, _super);\n        function Field() {\n            _super.apply(this, arguments);\n        }\n        return Field;\n    })(Member);\n    Reflect.Field = Field;\n    var Accessor = (function (_super) {\n        __extends(Accessor, _super);\n        function Accessor() {\n            _super.apply(this, arguments);\n        }\n        return Accessor;\n    })(Field);\n    Reflect.Accessor = Accessor;\n    var Module = (function (_super) {\n        __extends(Module, _super);\n        function Module(data) {\n            _super.call(this, data.name);\n            if (!Reflect.MODULES[this.name]) {\n                Reflect.MODULES[this.name] = this;\n                this.url = data.url;\n                this.main = data.main || false;\n                this.source = data.source;\n                this.exports = data.exports;\n                this.dependencies = data.dependencies || [];\n                this.dependants = data.dependants || [];\n                this.classes = Object.create(null);\n            }\n            else {\n                throw new Error(\"Duplicate module definition with name '\" + this.name + \"'\");\n            }\n        }\n        Module.all = function () {\n            var _this = this;\n            return Object.keys(Reflect.MODULES).map(function (name) { return _this.get(name); });\n        };\n        Module.has = function (name) {\n            return !!this.get(name);\n        };\n        Module.get = function (name) {\n            return Reflect.MODULES[name];\n        };\n        Object.defineProperty(Module.prototype, \"isDefined\", {\n            get: function () {\n                return !!this.exports;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Module.prototype, \"isEvaluated\", {\n            get: function () {\n                return this.isDefined || !!this.executor;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Module.prototype, \"isLoaded\", {\n            get: function () {\n                return this.isEvaluated || !!this.source;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Module.prototype.define = function () {\n            var _this = this;\n            if (this.executor) {\n                this.exports = Object.create(null);\n                var decorator = new ModuleDecorator(this);\n                var executor = this.executor.bind(decorator);\n                delete this.executor;\n                var definer = this.definer = executor(function (key, value) {\n                    _this.exports[key] = value;\n                });\n            }\n        };\n        Module.prototype.inject = function (module, index) {\n            module.execute(false);\n            if (module.dependants.indexOf(this.name) < 0) {\n                module.dependants.push(this.name);\n            }\n            this.definer.setters[index](module.exports);\n            return module;\n        };\n        Module.prototype.execute = function (clean) {\n            if (clean === void 0) { clean = true; }\n            if (this.definer) {\n                if (this.definer.execute) {\n                    this.definer.execute();\n                    delete this.definer.execute;\n                }\n                if (clean) {\n                    delete this.definer;\n                }\n            }\n            return this;\n        };\n        Module.prototype.add = function (cls) {\n            this.classes[cls.name] = cls;\n        };\n        Module.prototype.setClass = function (clazz) {\n            this.classes[clazz.name] = clazz;\n        };\n        Module.prototype.getClass = function (name) {\n            return this.classes[name];\n        };\n        Module.prototype.toJSON = function () {\n            var _this = this;\n            var any = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                any[_i - 0] = arguments[_i];\n            }\n            return {\n                name: this.name,\n                url: this.url,\n                main: this.main,\n                source: this.source,\n                state: ModuleState[this.state],\n                dependencies: this.dependencies,\n                dependants: this.dependants,\n                exports: (function () {\n                    if (_this.exports) {\n                        return Object.keys(_this.exports);\n                    }\n                })(),\n                classes: (function () {\n                    var map = Object.create(null), count = 0;\n                    Object.keys(_this.classes).forEach(function (c) {\n                        map[c] = _this.classes[c].toJSON();\n                        count++;\n                    });\n                    return count > 0 ? map : undefined;\n                })()\n            };\n        };\n        return Module;\n    })(Definition);\n    Reflect.Module = Module;\n    var ModuleDecorator = (function () {\n        function ModuleDecorator(module) {\n            this.module = module;\n            this.__metadata = this.__metadata.bind(this);\n            this.__decorate = this.__decorate.bind(this);\n            this.__extends = this.__extends.bind(this);\n            this.__param = this.__param.bind(this);\n        }\n        ModuleDecorator.prototype.__decorate = function (decorators, target, key, desc) {\n            var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n            if (c > 3 && r) {\n                Object.defineProperty(target, key, r);\n            }\n            this.__define(target, key);\n            return r;\n        };\n        ModuleDecorator.prototype.__metadata = function (k, v) {\n            var _this = this;\n            return function (target, key, desc) {\n                var def = _this.__define(target, key);\n                switch (k) {\n                    case 'design:returntype':\n                        def.returnType = v;\n                        break;\n                    case 'design:paramtypes':\n                        try {\n                            var paramTypes = v;\n                            var closureStr = String((desc && desc.value) || target).match(/function\\s*[a-z0-9$_,\\s]*\\(([a-z0-9$_,\\s]*)\\)/i);\n                            if (closureStr) {\n                                closureStr = closureStr[1].trim().split(/\\s+\\,\\s+/);\n                            }\n                            var paramNames = closureStr;\n                            var params = [];\n                            for (var i = 0; i < paramTypes.length; i++) {\n                                params[i] = new Param(paramNames[i], def, paramTypes[i]);\n                            }\n                            def.params = params;\n                        }\n                        catch (e) {\n                            console.info(e);\n                        }\n                        break;\n                    case 'design:type':\n                        def.type = v;\n                        break;\n                }\n            };\n        };\n        ModuleDecorator.prototype.__param = function (paramIndex, decorator) {\n            return function (target, key) {\n                decorator(target, key, paramIndex);\n            };\n        };\n        ModuleDecorator.prototype.__extends = function (d, b) {\n            var dd = this.__define(d);\n            var bb = this.__define(b);\n            dd.parent = bb;\n            if (!bb.children) {\n                bb.children = [dd];\n            }\n            else {\n                bb.children.push(dd);\n            }\n            for (var p in b)\n                if (b.hasOwnProperty(p))\n                    d[p] = b[p];\n            function __() { this.constructor = d; }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        ModuleDecorator.prototype.__define = function (target, key, desc) {\n            var scope, closure;\n            switch (typeof target) {\n                case \"function\":\n                    closure = target;\n                    scope = Scope.STATIC;\n                    break;\n                case \"object\":\n                    closure = target.constructor;\n                    scope = Scope.INSTANCE;\n                    break;\n            }\n            var cls = closure[Reflect.METADATA];\n            if (!cls) {\n                cls = closure[Reflect.METADATA]\n                    = this.module.classes[closure.name]\n                        = new Class(this.module, closure);\n            }\n            if (key) {\n                var member = cls.get(scope, key);\n                if (!member) {\n                    var descriptor = desc || Object.getOwnPropertyDescriptor(target, key) || {\n                        enumerable: true,\n                        configurable: true,\n                        writable: true,\n                        value: null\n                    };\n                    if (typeof descriptor.value == 'function') {\n                        member = new Method(key, cls, scope);\n                    }\n                    else if (descriptor.get || descriptor.set) {\n                        member = new Accessor(key, cls, scope);\n                    }\n                    else {\n                        member = new Field(key, cls, scope);\n                    }\n                    cls.add(member);\n                }\n                return member;\n            }\n            else {\n                return cls;\n            }\n        };\n        return ModuleDecorator;\n    })();\n    function metadata(metadataKey, metadataValue) {\n        return function (target, targetKey) { return defineMetadata(metadataKey, metadataValue, target, targetKey); };\n    }\n    Reflect.metadata = metadata;\n    function defineMetadata(metadataKey, metadataValue, target, targetKey) {\n        Definition.for(target, targetKey).setMetadata(metadataKey, metadataValue);\n    }\n    Reflect.defineMetadata = defineMetadata;\n    function hasMetadata(metadataKey, target, targetKey) {\n        var cls = Definition.for(target);\n        while (cls) {\n            var def = Definition.for(cls.constructor, targetKey);\n            if (def && def.hasMetadata(metadataKey)) {\n                return true;\n            }\n            else {\n                cls = cls.parent;\n            }\n        }\n        return false;\n    }\n    Reflect.hasMetadata = hasMetadata;\n    function hasOwnMetadata(metadataKey, target, targetKey) {\n        var def = Definition.for(target, targetKey);\n        if (def) {\n            return def.hasMetadata(metadataKey);\n        }\n        else {\n            return false;\n        }\n    }\n    Reflect.hasOwnMetadata = hasOwnMetadata;\n    function getMetadata(metadataKey, target, targetKey) {\n        var cls = Definition.for(target);\n        while (cls) {\n            var def = Definition.for(cls.constructor, targetKey);\n            if (def && def.hasMetadata(metadataKey)) {\n                return def.getMetadata(metadataKey);\n            }\n            else {\n                cls = cls.parent;\n            }\n        }\n        return null;\n    }\n    Reflect.getMetadata = getMetadata;\n    function getOwnMetadata(metadataKey, target, targetKey) {\n        var def = Definition.for(target, targetKey);\n        if (def && def.hasMetadata(metadataKey)) {\n            return def.getMetadata(metadataKey);\n        }\n        else {\n            return null;\n        }\n    }\n    Reflect.getOwnMetadata = getOwnMetadata;\n    function getMetadataKeys(target, targetKey) {\n        var cls = Definition.for(target);\n        var keys;\n        while (cls) {\n            var def = Definition.for(cls.constructor, targetKey);\n            if (def) {\n                return keys = keys.concat(def.getMetadataKeys());\n            }\n            else {\n                cls = cls.parent;\n            }\n        }\n        return keys;\n    }\n    Reflect.getMetadataKeys = getMetadataKeys;\n    function getOwnMetadataKeys(target, targetKey) {\n        var def = Definition.for(target, targetKey);\n        if (def) {\n            return def.getMetadataKeys();\n        }\n        else {\n            return [];\n        }\n    }\n    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;\n    function deleteMetadata(metadataKey, target, targetKey) {\n        var def = Definition.for(target, targetKey);\n        if (def && def.hasMetadata(metadataKey)) {\n            def.deleteMetadata(metadataKey);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    Reflect.deleteMetadata = deleteMetadata;\n})(Reflect || (Reflect = {}));\n///<reference path=\"./reflect.ts\"/>\nvar Runtime;\n(function (Runtime) {\n    var Module = Reflect.Module;\n    var ModuleState = Reflect.ModuleState;\n    var Loader = (function () {\n        function Loader() {\n            this.load = this.load.bind(this);\n            this.define = this.define.bind(this);\n            this.eval = this.eval.bind(this);\n        }\n        Object.defineProperty(Loader, \"global\", {\n            get: function () {\n                var _this = this;\n                return Object.defineProperty(this, 'global', {\n                    value: (function () {\n                        switch (_this.platform) {\n                            case 'browser': return window;\n                            case 'node': return global;\n                        }\n                    })()\n                }).global;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Loader, \"platform\", {\n            get: function () {\n                return Object.defineProperty(this, 'platform', {\n                    value: (function () {\n                        if (typeof window != 'undefined') {\n                            return 'browser';\n                        }\n                        else if (typeof process == 'object') {\n                            return 'node';\n                        }\n                    })()\n                }).platform;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Loader.prototype.import = function (uri) {\n            var _this = this;\n            return this.module(uri).then(function (m) { return (_this.main = _this.main ? _this.main : (m.main = true, m), m.exports); });\n        };\n        Loader.prototype.module = function (id) {\n            var name = Runtime.Path.moduleId(this.root, id);\n            var url = Runtime.Path.moduleUrl(this.root, id);\n            var module = Module.get(name);\n            if (!module) {\n                module = new Module({ name: name, url: url });\n            }\n            return Promise.resolve(module)\n                .then(this.load)\n                .then(this.eval)\n                .then(this.define)\n                .then(function (m) { return (module.state = ModuleState.DONE, module); })\n                .catch(function (e) { return (module.state = ModuleState.FAILED, Promise.reject(e)); });\n        };\n        Loader.prototype.register = function (requires, executor) {\n            this.current.dependencies = requires;\n            this.current.executor = executor;\n        };\n        Loader.prototype.bundle = function (content) {\n            for (var id in content) {\n                var name = Runtime.Path.moduleId(this.root, id);\n                var url = Runtime.Path.moduleUrl(this.root, id);\n                new Module({\n                    name: name,\n                    url: url,\n                    main: false,\n                    source: content[name]\n                });\n            }\n        };\n        Object.defineProperty(Loader.prototype, \"root\", {\n            get: function () {\n                return Object.defineProperty(this, 'root', {\n                    value: Runtime.Path.resolve(Runtime.Path.dirname(this.runtime), '..')\n                }).root;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Loader.prototype.eval = function (module) {\n            return Promise.resolve(module);\n        };\n        Loader.prototype.load = function (module) {\n            return Promise.resolve(module);\n        };\n        Loader.prototype.define = function (module) {\n            var _this = this;\n            if (module.isDefined) {\n                return Promise.resolve(module);\n            }\n            else {\n                var dir = Runtime.Path.dirname(module.url);\n                module.state = ModuleState.DEFINING;\n                module.dependencies = module.dependencies.map(function (d) {\n                    var path = d + '.js';\n                    if (path[0] == '.') {\n                        path = Runtime.Path.resolve(dir, path);\n                    }\n                    else {\n                        path = Runtime.Path.resolve(_this.root, path);\n                    }\n                    return Runtime.Path.moduleId(_this.root, path);\n                });\n                module.define();\n                if (module.dependencies.length) {\n                    var requires = module.dependencies.map(function (r, i) { return _this.module(r).then(function (m) { return module.inject(m, i); }); });\n                    return Promise.all(requires).then(function (r) { return Promise.resolve(module.execute()); });\n                }\n                else {\n                    return Promise.resolve(module.execute());\n                }\n            }\n        };\n        return Loader;\n    })();\n    Runtime.Loader = Loader;\n    var BrowserLoader = (function (_super) {\n        __extends(BrowserLoader, _super);\n        function BrowserLoader() {\n            _super.apply(this, arguments);\n        }\n        Object.defineProperty(BrowserLoader.prototype, \"script\", {\n            get: function () {\n                return Object.defineProperty(this, 'script', {\n                    value: (function () {\n                        var script = window.document.querySelector('script[main]');\n                        if (!script) {\n                            var scripts = window.document.querySelectorAll('script');\n                            for (var i = 0; i < scripts.length; i++) {\n                                if (scripts[i].src.endsWith('runtime/package.js')) {\n                                    return scripts[i];\n                                }\n                            }\n                        }\n                        else {\n                            return script;\n                        }\n                    })()\n                }).script;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BrowserLoader.prototype, \"runtime\", {\n            get: function () {\n                return this.script.src;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        BrowserLoader.prototype.eval = function (module) {\n            var _this = this;\n            if (module.isEvaluated) {\n                return Promise.resolve(module);\n            }\n            else {\n                return new Promise(function (accept, reject) {\n                    module.state = ModuleState.EVALUATING;\n                    _this.current = module;\n                    var aHead = window.document.querySelector('head');\n                    var aScript = window.document.createElement('script');\n                    aScript.type = 'text/javascript';\n                    aScript.id = module.name;\n                    aScript.text = module.source + '\\n//# sourceURL=' + module.url;\n                    aHead.appendChild(aScript);\n                    if (_this.current.isEvaluated) {\n                        _this.current = null;\n                        accept(module);\n                    }\n                    else {\n                        reject(new Error(\"Evaluation failed in \" + module.url));\n                    }\n                });\n            }\n        };\n        BrowserLoader.prototype.load = function (module) {\n            if (module.isLoaded) {\n                return Promise.resolve(module);\n            }\n            else {\n                module.state = ModuleState.LOADING;\n                return new Promise(function (accept, reject) {\n                    var oReq = new window.XMLHttpRequest();\n                    oReq.addEventListener('load', function (e) {\n                        module.source = oReq.responseText;\n                        accept(module);\n                    });\n                    oReq.addEventListener(\"error\", function (e) {\n                        module.source = String(e.stack || e);\n                        reject(e);\n                    });\n                    oReq.open(\"get\", module.url, true);\n                    oReq.send();\n                });\n            }\n        };\n        return BrowserLoader;\n    })(Loader);\n    Runtime.BrowserLoader = BrowserLoader;\n    var NodeLoader = (function (_super) {\n        __extends(NodeLoader, _super);\n        function NodeLoader() {\n            _super.apply(this, arguments);\n        }\n        Object.defineProperty(NodeLoader, \"fs\", {\n            get: function () {\n                return Object.defineProperty(this, 'fs', {\n                    value: require('fs')\n                }).fs;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NodeLoader, \"vm\", {\n            get: function () {\n                return Object.defineProperty(this, 'vm', {\n                    value: require('vm')\n                }).vm;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NodeLoader.prototype, \"context\", {\n            get: function () {\n                return {\n                    System: global['System'],\n                    Reflect: global['Reflect'],\n                    Buffer: global['Buffer'],\n                    require: global['require'],\n                    process: global['process'],\n                    console: global['console'],\n                    __filename: this.current.url,\n                    __dirname: Runtime.Path.dirname(this.current.url)\n                };\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NodeLoader.prototype, \"runtime\", {\n            get: function () {\n                return __filename;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NodeLoader.prototype.eval = function (module) {\n            var _this = this;\n            if (module.isEvaluated) {\n                return Promise.resolve(module);\n            }\n            else {\n                return new Promise(function (accept, reject) {\n                    module.state = ModuleState.EVALUATING;\n                    _this.current = module;\n                    NodeLoader.vm.runInNewContext(module.source, _this.context, {\n                        filename: module.url\n                    });\n                    if (_this.current.isEvaluated) {\n                        _this.current = null;\n                        accept(module);\n                    }\n                    else {\n                        reject(new Error(\"Evaluation failed in \" + module.url));\n                    }\n                });\n            }\n        };\n        NodeLoader.prototype.load = function (module) {\n            if (module.isLoaded) {\n                return Promise.resolve(module);\n            }\n            else {\n                module.state = ModuleState.LOADING;\n                return new Promise(function (accept, reject) {\n                    NodeLoader.fs.readFile(module.url, 'utf8', function (err, data) {\n                        if (err) {\n                            module.source = String(err.stack || err);\n                            reject(err);\n                        }\n                        else {\n                            module.source = data;\n                            accept(module);\n                        }\n                    });\n                });\n            }\n        };\n        return NodeLoader;\n    })(Loader);\n    Runtime.NodeLoader = NodeLoader;\n})(Runtime || (Runtime = {}));\n///<reference path=\"./reflect.ts\"/>\n///<reference path=\"./loader.ts\"/>\n///<reference path=\"./helpers.ts\"/>\nvar System = (function () {\n    function System() {\n        if (!Runtime.Loader.global.System) {\n            Runtime.Loader.global.System = System;\n        }\n        return System;\n    }\n    Object.defineProperty(System, \"platform\", {\n        get: function () {\n            return Runtime.Loader.platform;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(System, \"loader\", {\n        get: function () {\n            return Object.defineProperty(this, 'loader', {\n                value: (function () {\n                    switch (System.platform) {\n                        case 'browser': return new Runtime.BrowserLoader();\n                        case 'node': return new Runtime.NodeLoader();\n                    }\n                })()\n            }).loader;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(System, \"modules\", {\n        get: function () {\n            return Reflect.MODULES;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    System.module = function (uri) {\n        return this.loader.module(uri);\n    };\n    System.import = function (uri) {\n        return this.loader.import(uri);\n    };\n    System.register = function (requires, execute) {\n        this.loader.register(requires, execute);\n    };\n    System.bundle = function (content) {\n        this.loader.bundle(content);\n    };\n    return System;\n})();\nnew System();//# sourceMappingURL=data:application/json;charset=utf-8;base64,"
});