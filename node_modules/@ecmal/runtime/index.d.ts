/// <reference types="@ecmal/core" />
declare var __moduleName: string;
declare namespace System {
    type Module = {
        url: string;
        exports: any;
        requires: string[];
        export(name: string, value: any): void;
    };
    type Modules = {
        [k: string]: Module;
    };
    const root: string;
    const url: string;
    const modules: Modules;
}
declare module "@ecmal/runtime/decorators/bound" {
    export function Bound<T>(target: Object, key: PropertyKey, desc: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;
}
declare module "@ecmal/runtime/decorators/cached" {
    export function Cached<T>(target: Object, key: PropertyKey): void;
}
declare module "@ecmal/runtime/decorators/properties" {
    export const Constant: PropertyDecorator & MethodDecorator;
    export const Final: PropertyDecorator & MethodDecorator;
    export const Hidden: PropertyDecorator & MethodDecorator;
}
declare module "@ecmal/runtime/decorators" {
    export * from "@ecmal/runtime/decorators/bound";
    export * from "@ecmal/runtime/decorators/cached";
    export * from "@ecmal/runtime/decorators/properties";
}
declare module "@ecmal/runtime/events" {
    export class Emitter {
        on(event: string, handler: Function, options?: any): void;
        once(event: string, handler: Function, options?: any): void;
        off(event?: string, handler?: Function): void;
        emit(event: string, ...args: any[]): any[];
    }
}
declare module "@ecmal/runtime/helpers" {
    export class Path {
        static readonly SEP: string;
        static filename(path: String): string;
        static dirname(path: any): any;
        static normalize(path: any): string;
        static resolve(...paths: any[]): any;
        static moduleUrl(base: any, id: any): any;
        static moduleId(base: any, url: any): any;
    }
}
declare module "@ecmal/runtime/module" {
    import { Emitter } from "@ecmal/runtime/events";
    export class Module extends Emitter {
        id: string;
        url: string;
        requires: string[];
        members: any;
        exports: any;
        parent: Module;
        toString(): string;
        private inspect();
        export(name: string, value: any): void;
    }
}
declare module "@ecmal/runtime/loaders/base" {
    import { Module } from "@ecmal/runtime/module";
    export abstract class Loader {
        protected abstract detectRoot(): void;
        protected abstract loadProject(id: string, url: string): Promise<any>;
        protected abstract loadModule(id: string, url: string): Promise<any>;
        protected current: string;
        protected registrations: any;
        protected projects: any;
        constructor();
        import(name: string, parent?: Module): Promise<any>;
        register(name: string, requires: string[], definer: Function): any;
    }
}
declare module "@ecmal/runtime/loaders/app" {
    import { Loader } from "@ecmal/runtime/loaders/base";
    export class AppLoader extends Loader {
        constructor();
        private static readonly fs;
        private static readonly vm;
        protected readonly runtime: string;
        protected detectRoot(): void;
        protected loadModule(id: string, url: string): Promise<any>;
        protected loadProject(id: string, url: string): Promise<any>;
        protected nodeModule(id: any): string;
        protected evalModule(id: string, url: string, data: string): void;
    }
}
declare module "@ecmal/runtime/loaders/web" {
    import { Loader } from "@ecmal/runtime/loaders/base";
    export class WebLoader extends Loader {
        readonly script: any;
        readonly runtime: string;
        register(name: string, requires: string[], definer: Function): any;
        protected detectRoot(): void;
        protected loadModule(id: string, url: string): Promise<any>;
        protected loadProject(id: string, url: string): Promise<any>;
        protected loadJson(url: string): Promise<any>;
        protected loadText(url: string): Promise<string>;
    }
}
declare module "@ecmal/runtime/loader" {
    export * from "@ecmal/runtime/loaders/base";
    export * from "@ecmal/runtime/loaders/app";
    export * from "@ecmal/runtime/loaders/web";
}
declare module "@ecmal/runtime/system" {
    import { Emitter } from "@ecmal/runtime/events";
    import { Module } from "@ecmal/runtime/module";
    export class System extends Emitter {
        url: string;
        root: string;
        module: Module;
        modules: {
            [name: string]: Module;
        };
        globals: any;
        platform: "app" | "web";
        import(name: string): Promise<any>;
        register(name: string, requires: string[], definer: Function): any;
    }
    export default System;
}
